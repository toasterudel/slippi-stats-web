{"version":3,"sources":["components/FileUpload.jsx","App.js","serviceWorker.js","index.js"],"names":["FileUpload","useState","file","setFile","fileChange","event","a","target","files","uploadFiles","formData","FormData","append","name","console","log","axios","post","Form","Group","File","id","accept","multiple","onChange","onClick","Text","muted","length","Object","values","map","val","index","key","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0RAwCeA,MApCf,WAAuB,IAAD,EACIC,mBAAS,IADb,mBACbC,EADa,KACPC,EADO,KAGdC,EAAU,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sDAEjBH,EAAQE,EAAME,OAAOC,OAFJ,2CAAH,sDAKVC,EAAW,uCAAG,4BAAAH,EAAA,uDACdI,EAAW,IAAIC,UACVC,OAAO,SAAUV,EAAMA,EAAKW,MACrCC,QAAQC,IAAIb,GACZc,IAAMC,KAAK,iBAAkBP,GAJX,2CAAH,qDAMjB,OACE,kBAACQ,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,KACE,kBAACD,EAAA,EAAKE,KAAN,CACEC,GAAG,UACHC,OAAO,OACPC,UAAU,EACVC,SAAUpB,IAEZ,4BAAQqB,QAAShB,GAAjB,UACA,kBAACS,EAAA,EAAKQ,KAAN,CAAWL,GAAG,cAAcM,OAAK,GAAjC,2CAGCzB,EAAK0B,OAAS,GACbC,OAAOC,OAAO5B,GAAM6B,KAAI,SAACC,EAAKC,GAC5B,OAAO,uBAAGC,IAAKD,GAAR,cAA2BD,EAAInB,Y,MCrBnCsB,MARf,WACE,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.866a1211.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport axios from \"axios\";\n\nfunction FileUpload() {\n  const [file, setFile] = useState([]);\n\n  const fileChange = async (event) => {\n    //console.log(event.target.files.length);\n    setFile(event.target.files);\n  };\n\n  const uploadFiles = async () => {\n    let formData = new FormData();\n    formData.append(\"myFile\", file, file.name);\n    console.log(file);\n    axios.post(\"api/uploadfile\", formData);\n  };\n  return (\n    <Form>\n      <Form.Group>\n        <Form.File\n          id=\"slpfile\"\n          accept=\".slp\"\n          multiple={true}\n          onChange={fileChange}\n        />\n        <button onClick={uploadFiles}>Upload</button>\n        <Form.Text id=\"slpFileHelp\" muted>\n          Select between 1-5 slp files for upload\n        </Form.Text>\n        {file.length > 0 &&\n          Object.values(file).map((val, index) => {\n            return <p key={index}>File name: {val.name}</p>;\n          })}\n      </Form.Group>\n    </Form>\n  );\n}\n\nexport default FileUpload;\n","import React from \"react\";\nimport FileUpload from \"./components/FileUpload\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <FileUpload />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}